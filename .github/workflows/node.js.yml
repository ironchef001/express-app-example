# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [15.x]

    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    
  deploy:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [15.x]

    steps:
    # prerequisite: on AWS management console
    #   create a new gitaccess user and 
    #   store access_key_id and secret_access_key in the project setting.secrets
    - name: configure credential
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: login into Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
   
    - name: debugging
      run: |
        echo login-ecr.registry: ${{ steps.login-ecr.outputs.registry }}

    - name: checkout
      uses: actions/checkout@v2
    
    # prerequisite: on AWS management console
    #   create a private ECR repo 
    - name: build, tag, and push image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gitaction-express-app-example
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: describe image
      run: |
        echo outputs.image: ${{ steps.build-image.outputs.image }}
        
    # prerequisite: on AWS management console
    #   create a ECS Cluster
    #   create a service under ECS Cluster
    - name: fill in the new image id in ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: github-actions-container
        image: ${{ steps.build-image.outputs.image }}
        
    - name: describe task definition
      run: |
        echo describe task-definition ...
        cat ${{ steps.task-def.outputs.task-definition }}
        
    - name: deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: github-actions-svc
        cluster: github-actions
        wait-for-service-stability: true
